#
# Archetype for a polling-triggered integration.
#   Defines:
#    1. processing queue
#    2. dead letter queue
#    3. lambda to enqueue (i.e. poll) data
#    4. lambda to process enqueued data
#
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Cloud automation scripts for ...
Parameters:
  debuggingFor:
    Description: 'debugging category'
    Type: 'String'
    Default: 'xyz:services'
  # Manually define this in AWS IAM for just the services needed.
  lambdaExecutionRole:
    Description: 'Required. The role used for lambda execution.'
    Type: 'String'
    Default: 'arn:aws:iam::156283684378:role/LambdaCanUseSQS'

Resources:
  # Queue names should evoke what is being stored...
  
  # A dead-letter queue.
  myMessageQueueDL:
    Type: 'AWS::SQS::Queue'
    Properties: 
      MessageRetentionPeriod: 345600
      QueueName: 'my-messages-dlq'
      VisibilityTimeout: 90

  # The queue for messages.
  myMessageQueue:
    Type: 'AWS::SQS::Queue'
    Properties: 
      MessageRetentionPeriod: 345600
      QueueName: 'my-messages'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt myMessageQueueDL.Arn
        # maxReceiveCount=1 means no retries (message is only read for processing once).
        #  if an error occurs, it is sent to the dead-letter-queue immediately.
        maxReceiveCount: 1
      VisibilityTimeout: 90
  
  pollForMessages:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: pollForMessages
      Handler: index.pollForMessages
      Runtime: nodejs10.x
      CodeUri: ../
      Description: >-
        Polls for messages since the last poll timestamp. Anything
        found is placed in an SQS queue for processing.
      MemorySize: 128
      Timeout: 60
      Role: 
        Ref: lambdaExecutionRole
      # Defines how often to poll.
      Events:
        PollEvery5Minutes:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Environment:
        Variables:
          DEBUG:
            Ref: debuggingFor
          LOG_LEVEL: info
          POLLING_MODE: active
          QUEUE_URL: 
            Ref: myMessageQueue
          APP1_PRIVATE_KEY: '{{resolve:ssm:APP1_PRIVATE_KEY:1}}'
          GR8_ACCOUNT_ID: '{{resolve:ssm:GR8_ACCOUNT_ID:1}}'
          GR8_API_KEY: '{{resolve:ssm:GR8_API_KEY:1}}'
          SLACK_WEBHOOK_URL: '{{resolve:ssm:GR8_SLACK_WEBHOOK_URL:1}}'
      Tags:
        apps: app1

  processMessage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: processMessage
      Handler: index.processMessage
      Runtime: nodejs10.x
      CodeUri: ../
      Description: Processes a message ...
      MemorySize: 256
      Timeout: 60
      Role:
        Ref: lambdaExecutionRole
      Events:
        # A Preexisting Queue should be defined to hold the queue of company updates.
        MySQSEventMessageProcess:
          Type: SQS
          Properties:
            Queue: !GetAtt myMessageQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          DEBUG: 
            Ref: debuggingFor
          LOG_LEVEL: info
          PROCESSING_MODE: active
          APP1_PRIVATE_KEY: '{{resolve:ssm:APP1_PRIVATE_KEY:1}}'
          APP2_ACCESS_TOKEN: '{{resolve:ssm:APP2_ACCESS_TOKEN:1}}'
          SLACK_WEBHOOK_URL: '{{resolve:ssm:GR8_SLACK_WEBHOOK_URL:1}}'
      Tags:
        apps: app1,app2