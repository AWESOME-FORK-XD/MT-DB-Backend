#
# Archetype for a webhook-triggered integration.
#   Defines:
#    1. processing queue
#    2. dead letter queue
#    3. lambda to handle webhook (including API gateway definition)
#    4. lambda to process enqueued data
#
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Cloud automation scripts for ...
Parameters:
  debuggingFor:
    Description: 'debugging category'
    Type: 'String'
    Default: 'medten:services'
  # Manually define this in AWS IAM for just the services needed.
  lambdaExecutionRole:
    Description: 'Required. The role used for lambda execution.'
    Type: 'String'
    Default: 'arn:aws:iam::432961014712:role/LambdaExecutionRole'

Resources:
  handleAnyRequest:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: handleAnyRequest
      Handler: lambda.handler
      Runtime: nodejs12.x
      CodeUri: ./
      Description: Handles inbound requests for the AWS serverless express webapp.
      MemorySize: 256
      Timeout: 60
      Role:
        Ref: lambdaExecutionRole
      Events:
        # Define the API Gateway endpoint here.
        ProxyApiRoot:
          Type: Api
          Properties:
            Path: '/'
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: ANY
      # Environment:
      #   Variables:
      #     DEBUG:
      #       Ref: debuggingFor
      #     LOG_LEVEL: info
      #     DB_HOST: '{{resolve:ssm:DB_HOST:1}}'
      #     DB_PORT: '{{resolve:ssm:DB_PORT:1}}'
      #     DB_USER: '{{resolve:ssm:DB_USER:1}}'
      #     DB_PASSWORD: '{{resolve:ssm:DB_PASSWORD:1}}'
      #     DB_DATABASE: '{{resolve:ssm:DB_DATABASE:1}}'
      Tags:
        environment: poc


  